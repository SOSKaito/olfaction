type CodeSmell {
  id: ID!
  locations: [Location!]

  """
  The complete lifespan of this code smell throughout commit history.
  """
  lifeSpan: CodeSmellLifeSpan!

  """
  This code smell in a previous commit. This may not be in the direct parent
  commit because not every commit must be analyzed, but it is guaranteed to be
  in an ascendant commit.
  """
  predecessor: CodeSmell

  """
  This code smell in a later commit. This may not be in the direct child commit
  because not every commit must be analyzed, but it is guaranteed to be in a
  descendant commit.
  """
  successor: CodeSmell

  """
  The commit this code smell was detected in.
  """
  commit: Commit
}

input CodeSmellInput {
  """
  A client-provided globally unique ID (UUID). This is used to declare
  predecessors. If a code smell with this ID already exists, the code smell will be updated.
  """
  id: ID!

  """
  An arbitrary string that uniquely identifies the kind of code smell, e.g. "GodClass". Must be the same for every instance.
  """
  kind: String!

  """
  A message for the code smell, which can be specific to this particular instance.
  """
  message: String

  """
  Optional ID of a code smell in a previous commit, to define the life span of
  this code smell through the commit history.This will set up the successor for
  the referenced code smell as well.
  """
  predecessor: String

  """
  Optional ID of a code smell in a previous commit, to define the life span of
  this code smell through commits. This will set up the predecessor for the
  referenced code smell as well.
  """
  successor: String

  """
  Locations of the code smell in the code.
  """
  locations: [LocationInput!]
}

"""
A lifespan of a code smell throughout commit history.
"""
type CodeSmellLifeSpan {
  kind: String

  """
  The instances of the code smell throughout commit history.
  """
  instances: [CodeSmell]

  """
  The duration this code smell was present in the codebase as an ISO8601 duration string
  """
  duration: String!

  """
  The interval this code smell was present in the codebase as an ISO8601 interval string with start/end
  """
  interval: String!
}

type Commit {
  sha: String!
  message: String!
  author: Signature!
  committer: Signature!
  parents: [Commit!]!

  """
  The files that existed at this commit in the repository
  """
  files: [File!]!
  codeSmells: [CodeSmell!]!
}

type File {
  path: String!

  """
  The file content from the git repository. null if the repository was not uploaded.
  """
  content(
    """
    Encoding to use. If not given, will try to auto-detect, otherwise default to UTF8.
    """
    encoding: String
  ): String
  linesCount: Int
  commit: Commit!
}

type Location {
  file: File!
  range: Range

  """
  The content of the range.
  """
  content(
    """
    Encoding to use. If not given, will try to auto-detect, otherwise default to UTF8.
    """
    encoding: String
  ): String
}

input LocationInput {
  """
  The file path of the location.
  """
  file: String!
  range: RangeInput
}

type Mutation {
  addCodeSmells(repository: String!, commit: String!, codeSmells: [CodeSmellInput]!): [CodeSmell!]!
}

type Position {
  """
  The 0-based line number of the position
  """
  line: Int!

  """
  The 0-based character number of the position
  """
  character: Int!
}

input PositionInput {
  """
  The 0-based line number of the position
  """
  line: Int!

  """
  The 0-based character number of the position
  """
  character: Int!
}

type Query {
  codeSmell: CodeSmell
  repository(name: String!): Repository
  repositories: [Repository]!
}

type Range {
  """
  The start position of the range, inclusive.
  """
  start: Position!

  """
  The end position of the range, exclusive.
  """
  end: Position!
}

input RangeInput {
  """
  The start position of the range, inclusive.
  """
  start: PositionInput!

  """
  The end position of the range, exclusive.
  """
  end: PositionInput!
}

type Repository {
  name: String
  commit: Commit
  codeSmellLifespans: [CodeSmellLifeSpan!]!
}

type Signature {
  name: String!
  email: String!
  date: String!
}
