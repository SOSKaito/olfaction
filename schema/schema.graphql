type CodeSmell {
  id: ID!

  """
  A message for this specific code smell instance.
  """
  message: String
  locations: [Location!]

  """
  The complete lifespan of this code smell throughout commit history.
  """
  lifeSpan: CodeSmellLifeSpan!

  """
  This code smell in a previous commit. This may not be in the direct parent
  commit because not every commit must be analyzed, but it is guaranteed to be
  in an ascendant commit.
  """
  predecessor: CodeSmell

  """
  This code smell in a later commit. This may not be in the direct child commit
  because not every commit must be analyzed, but it is guaranteed to be in a
  descendant commit.
  """
  successor: CodeSmell

  """
  The commit this code smell was detected in.
  """
  commit: Commit
}

"""
A connection to a list of items.
"""
type CodeSmellConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CodeSmellEdge]
}

"""
An edge in a connection.
"""
type CodeSmellEdge {
  """
  The item at the end of the edge
  """
  node: CodeSmell

  """
  A cursor for use in pagination
  """
  cursor: String!
}

input CodeSmellInput {
  """
  A client-provided ID to associate code smell instances in multiple commits as part of the same code smell lifespan
  """
  lifespan: ID!
  ordinal: Int!

  """
  An arbitrary string that uniquely identifies the kind of code smell, e.g. "GodClass". Must be the same for every instance.
  """
  kind: String!

  """
  A message for the code smell, which can be specific to this particular instance.
  """
  message: String

  """
  Locations of the code smell in the code.
  """
  locations: [LocationInput!]
}

"""
A lifespan of a code smell throughout commit history.
"""
type CodeSmellLifeSpan {
  id: ID!
  kind: String

  """
  The instances of the code smell throughout commit history.
  """
  instances(after: String, first: Int): CodeSmellConnection!

  """
  The duration this code smell was present in the codebase as an ISO8601 duration string
  """
  duration: String!

  """
  The interval this code smell was present in the codebase as an ISO8601 interval string with start/end
  """
  interval: String!
}

"""
A connection to a list of items.
"""
type CodeSmellLifeSpanConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CodeSmellLifeSpanEdge]
}

"""
An edge in a connection.
"""
type CodeSmellLifeSpanEdge {
  """
  The item at the end of the edge
  """
  node: CodeSmellLifeSpan

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
The difference between two versions of a file in [Git's default combined diff
format](https://git-scm.com/docs/git-diff#_combined_diff_format).This format is
used to represent a combined diff for comparisons with potentially multiple base
revisions, e.g. to compare a file in a commit to its parents.It will only list
files that were modified from all base revisions.
"""
type CombinedFileDifference {
  """
  For each base revision, the change kind git detected comparing to that revision.
  """
  changeKinds: [FileChangeKind!]!

  """
  The version of the file at the head revision. null if the file no longer exists in the head revision.
  """
  headFile: File

  """
  For each base revision, the file in that revision. Will contain null if that commit did not contain the file.
  """
  baseFiles: [File]!
}

"""
A connection to a list of items.
"""
type CombinedFileDifferenceConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CombinedFileDifferenceEdge]
}

"""
An edge in a connection.
"""
type CombinedFileDifferenceEdge {
  """
  The item at the end of the edge
  """
  node: CombinedFileDifference

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
A git commit object.
"""
type Commit {
  oid: GitObjectID!
  message: String!
  subject: String!
  author: Signature!
  committer: Signature!
  parents: [Commit!]!

  """
  The file differences between this commit and its parents in [Git's combined diff
  format](https://git-scm.com/docs/git-diff-tree#_combined_diff_format).This
  list contains one element for each file that is different in this commit when
  compared to one of its parents.
  """
  combinedFileDifferences(after: String, first: Int): CombinedFileDifferenceConnection!

  """
  The files that existed at this commit in the repository
  """
  files(after: String, first: Int): FileConnection!
  codeSmells(after: String, first: Int): CodeSmellConnection!
}

"""
A connection to a list of items.
"""
type CommitConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [CommitEdge]
}

"""
An edge in a connection.
"""
type CommitEdge {
  """
  The item at the end of the edge
  """
  node: Commit

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type File {
  path: String!

  """
  The file content from the git repository. null if the repository was not uploaded.
  """
  content(
    """
    Encoding to use. If not given, will try to auto-detect, otherwise default to UTF8.
    """
    encoding: String
  ): String

  """
  The commit this file exists at.
  """
  commit: Commit!

  """
  The code smells that exist in this file.
  """
  codeSmells(after: String, first: Int): CodeSmellConnection!

  """
  The amount of lines in this file.
  """
  lineCounts: LineCounts!
}

enum FileChangeKind {
  ADDED
  COPIED
  DELETED
  MODIFIED
  RENAMED
  TYPE_CHANGED
}

"""
A connection to a list of items.
"""
type FileConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [FileEdge]
}

"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge
  """
  node: File

  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
A 40-character Git object ID.
"""
scalar GitObjectID

type LineCounts {
  """
  Physical lines
  """
  total: Int!

  """
  Lines of code (source)
  """
  source: Int

  """
  Lines with comments
  """
  comment: Int

  """
  Lines with single-line comments
  """
  single: Int

  """
  Lines with block comments
  """
  block: Int

  """
  Lines mixed up with source and comments
  """
  mixed: Int

  """
  Empty lines within block comments
  """
  blockEmpty: Int

  """
  Empty lines
  """
  empty: Int

  """
  Lines with TODOs
  """
  todo: Int
}

type Location {
  file: File!
  range: Range

  """
  The content of the range.
  """
  content(
    """
    Encoding to use. If not given, will try to auto-detect, otherwise default to UTF8.
    """
    encoding: String
  ): String
}

input LocationInput {
  """
  The file path of the location.
  """
  file: String!
  range: RangeInput
}

type Mutation {
  addCodeSmells(repository: String!, commit: String!, codeSmells: [CodeSmellInput!]!): [CodeSmell!]!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Position {
  """
  The 0-based line number of the position
  """
  line: Int!

  """
  The 0-based character number of the position
  """
  character: Int!
}

input PositionInput {
  """
  The 0-based line number of the position
  """
  line: Int!

  """
  The 0-based character number of the position
  """
  character: Int!
}

type Query {
  codeSmell(
    """
    The ID of the code smell to query.
    """
    id: ID!
  ): CodeSmell
  repository(
    """
    The name under which the repository was uploaded.
    """
    name: String!
  ): Repository
  repositories(after: String, first: Int): RepositoryConnection!
}

type Range {
  """
  The start position of the range, inclusive.
  """
  start: Position!

  """
  The end position of the range, exclusive.
  """
  end: Position!
}

input RangeInput {
  """
  The start position of the range, inclusive.
  """
  start: PositionInput!

  """
  The end position of the range, exclusive.
  """
  end: PositionInput!
}

type Repository {
  name: String
  commits(
    after: String
    first: Int

    """
    Limit the commits to ones with log message that matches the specified
    pattern (regular expression).The pattern supports Git's extended regular
    expression syntax.
    """
    messagePattern: String

    """
    The revision to start at (e.g. a commit, a branch, a tag, etc).
    """
    revision: String = "HEAD"

    """
    Show commits more recent than a specific date.
    """
    since: String

    """
    Show commits older than a specific date.
    """
    until: String
  ): CommitConnection!
  commit(oid: GitObjectID!): Commit
  codeSmellLifespans(after: String, first: Int, kind: String): CodeSmellLifeSpanConnection!
}

"""
A connection to a list of items.
"""
type RepositoryConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RepositoryEdge]
}

"""
An edge in a connection.
"""
type RepositoryEdge {
  """
  The item at the end of the edge
  """
  node: Repository

  """
  A cursor for use in pagination
  """
  cursor: String!
}

type Signature {
  name: String!
  email: String!
  date: String!
}
